#!/usr/bin/env python3
# Generate and work with shared RSA keys.
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization, hashes, padding
from sys import argv, stdin, stdout, stderr
import os

usage = """Usage:

cosign genkey N basename

    Produces N private key shares `basename-N.key` and
    public key `basename.pub`.  The public key can be
    published and the inidividual key shares should be
    sent to the cosigners under separate secured channels.

    After generation the shares should never be brought
    together since the private key can be regenerated
    from all of them together.


cosign sign key-n.key < file > sig-n

    Uses partial key to sign stdin and writes signature to stdout.
    Each cosigning party must do this separately and send their
    partial signatures to a coordinator to combine them.


cosign merge key.pub sig-* > file.sig

    Merges the partial signature files into a full signature.
    All of the cosigning parties must sign the same file
    and send their partial signatures to the coordinator
    to combine them.


openssl dgst -verify key.pub -signature file.sig < file

    Verify the merged signature with the public key.


openssl rsautl -verify -pubin -inkey key.pub -asn1parse -in file

    Produce an ASN1 tree of the signed file for debugging if
    the verification fails for some reason.


"""

bits = 2048
block_length = int(bits / 8)


def write_stdout(data):
	with os.fdopen(stdout.fileno(), "wb", closefd=False) as fh:
		fh.write(data)
		fh.flush()

def write_bytes(filename, data):
	with open(filename, "wb") as file:
		file.write(data)

def read_bytes(filename):
	with open(filename, "rb") as file:
		return file.read()

def read_pubkey(filename):
	return serialization.load_pem_public_key(
		read_bytes(filename),
		backend = default_backend()
	)

def write_pubkey(filename, pubkey):
	write_bytes(filename, pubkey.public_bytes(
		encoding = serialization.Encoding.PEM,
		format = serialization.PublicFormat.SubjectPublicKeyInfo,
	))

def read_key(filename):
	return serialization.load_pem_private_key(
		read_bytes(filename),
		backend = default_backend(),
		password = None,
	)

def write_key(filename, key):
	write_bytes(filename, key.private_bytes(
		encoding = serialization.Encoding.PEM,
		format = serialization.PrivateFormat.PKCS8,
		encryption_algorithm = serialization.NoEncryption(),
	))

# when writing a new key based on the private components,
# we don't fill in the Chinese Remainder Theorem (CRT) components
# which will force OpenSSL to use only the private exponent (d)
# and public modulus/exponent (n,e) to perform operations
#
# this requires that we patch out the part that validates these
# numbers.
def everything_ok(*args):
	return True
rsa._check_private_key_components = everything_ok

def genkey(shares, basename):
	if shares > 16:
		raise("%d shares > maximum 16" % (shares))

	key = rsa.generate_private_key(
		public_exponent = 0x10001,
		key_size = bits, 
		backend = default_backend()
	)

	pubkey = key.public_key()
	public = pubkey.public_numbers()
	priv = key.private_numbers()

	# write out this key
	write_pubkey(basename + ".pub", pubkey)

	# do NOT write out the full key
	write_key(basename + ".key", key)

	fake_d_sum = priv.d

	# Generate N partial versions of D
	# such that they sum to D
	for i in range(0,shares):
		if i == shares-1:
			# last fake_d is what ever is left over
			fake_d = fake_d_sum
		else:
			# generate a random d value slightly shorter than d,
			# 16 shares is the maximum
			fake_d = int.from_bytes(
				os.urandom(block_length - 2),
				byteorder='big')
			fake_d_sum -= fake_d

		newkey = rsa.RSAPrivateNumbers(
			public_numbers = public,
			d = fake_d,
			p = 1, # fake_p,
			q = 1, # fake_q,
			dmp1 = 0, # fake_dmp1,
			dmq1 = 0, # fake_dmq1,
			iqmp = 0, # fake_iqmp,
		).private_key(
			backend = default_backend(),
		)
		write_key("%s-%d.key" % (basename, i), newkey)


def merge(pubkey_filename, files):
	pubkey = read_pubkey(pubkey_filename)
	modulus = pubkey.public_numbers().n

	sig = int(1)

	for filename in files:
		b = read_bytes(filename)
		if len(b) != block_length:
			raise("%s: length %d != expected %d" % (filename, len(b), block_length))
		newsig = int.from_bytes(
			bytes = b,
			byteorder = 'big',
		)
		sig = (sig * newsig) % modulus

	write_stdout(sig.to_bytes(
		length = block_length,
		byteorder = 'big',
	))


"""From: https://tools.ietf.org/html/rfc3447#section-9.2

   1. Apply the hash function to the message M to produce a hash value
      H:

         H = Hash(M).

      If the hash function outputs "message too long," output "message
      too long" and stop.

   2. Encode the algorithm ID for the hash function and the hash value
      into an ASN.1 value of type DigestInfo (see Appendix A.2.4) with
      the Distinguished Encoding Rules (DER), where the type DigestInfo
      has the syntax

      DigestInfo ::= SEQUENCE {
          digestAlgorithm AlgorithmIdentifier,
          digest OCTET STRING
      }

      The first field identifies the hash function and the second
      contains the hash value.  Let T be the DER encoding of the
      DigestInfo value (see the notes below) and let tLen be the length
      in octets of T.

   3. If emLen < tLen + 11, output "intended encoded message length too
      short" and stop.

   4. Generate an octet string PS consisting of emLen - tLen - 3 octets
      with hexadecimal value 0xff.  The length of PS will be at least 8
      octets.

   5. Concatenate PS, the DER encoding T, and other padding to form the
      encoded message EM as

         EM = 0x00 || 0x01 || PS || 0x00 || T.

   6. Output EM.

Notes.

   1. For the six hash functions mentioned in Appendix B.1, the DER
      encoding T of the DigestInfo value is equal to the following:

      SHA-256: (0x)30 31 30 0d 06 09 60 86 48 01 65 03 04 02 01 05 00
                   04 20 || H.
"""

def pkcs1_1v5_encode(data):
	sha = hashes.Hash(hashes.SHA256(), backend=default_backend())
	sha.update(data)
	H = sha.finalize()

	# DER encoding of the digestInfo struct with the SHA256 OID
	# and the 20-byte data
	T = bytes([
0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20
]) + H

	emLen = block_length
	tLen = len(T)
	if emLen < tLen + 11:
		raise("intended encoded message length too short")

	psLen = emLen - tLen - 3
	PS = bytearray(psLen)
	for i in range(0,psLen):
		PS[i] = 0xFF

	EM = bytes([0x00, 0x01]) + PS + bytes([0x00]) + T
	#print(EM)
	return EM

def sign(key_filename):
	key = read_key(key_filename)
	pub = key.public_key().public_numbers()
	priv = key.private_numbers()
	exponent = priv.d
	modulus = pub.n

	# read the data from stdin
	#data = bytes(stdin.read(), 'utf-8')
	with os.fdopen(stdin.fileno(), "rb", closefd=False) as fh:
		data = fh.read()

	data = pkcs1_1v5_encode(data)

	# convert the padded digest to a big integer
	m = int.from_bytes(
		bytes = data,
		byteorder = 'big',
	)

	# do the RSA signing operation
	sig = pow(m, exponent, modulus)

	write_stdout(sig.to_bytes(
		length = block_length,
		byteorder = 'big',
	))

if len(argv) <= 1:
	stderr.write(usage)
	exit(1)

cmd = argv[1]

if cmd == 'genkey':
	if len(argv) != 4:
		stderr.write(usage)
		exit(1)
	genkey(int(argv[2]), argv[3])

elif cmd == 'sign':
	if len(argv) != 3:
		stderr.write(usage)
		exit(1)
	sign(argv[2])

elif cmd == 'merge':
	if len(argv) < 4:
		stderr.write(usage)
		exit(1)
	merge(argv[2], argv[3:])

elif cmd == 'help' or cmd == '-h' or cmd == '--help':
	stdout.write(usage)
	exit(0)

else:
	stderr.write(usage)
	exit(1)

# success!
exit(0)
